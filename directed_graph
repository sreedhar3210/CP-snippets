//This class have the methods to detect cycle, finding topological sort, find strongly connected components of a directed graph.
class directed_graph{
    public:
        int n;
        vector<bool>vis1,vis2,vis;
        vector<vector<int>>adj,prev_adj,all_scc;
        vector<int>topo_sort,cur_scc;
 
        directed_graph(int n){
            this->n=n;
            vis=vis1=vis2=vector<bool>(n+1,false);
            adj=prev_adj=vector<vector<int>>(n+1);
        }
 
        bool loop_dfs(int u){
            for(auto v : adj[u]){
                if(!vis1[v]){
                    vis1[v]=true;vis2[v]=true;
                    if(loop_dfs(v))     return true;
                }
                else if(vis2[v])        return true;
            }
            vis2[u]=false;
            return false;
        }
        //this function to returns true if there exists a cycle in the given directed graph.
        bool check_cycle(){
            for(int i=1;i<=n;i++){
                if(!vis1[i]){
                    vis1[i]=true;vis2[i]=true;
                    if(loop_dfs(i))         return true;
                }
            }
            return false;
        }
 
        void dfs(int u){
            for(auto v : adj[u]){
                if(!vis[v]){
                    vis[v]=true;dfs(v);
                }
            }
            topo_sort.push_back(u);
        }
 
        //this function fills the topological sort order of the given directed graph.
        //note that for a given directed graph there may be many correct topological sort orders possible.
        void find_topo_sort(){
            for(int i=1;i<=n;i++){
                if(!vis[i]){
                    vis[i]=true;dfs(i);
                }
            }
        }
 
        void scc_dfs(int u){
            cur_scc.push_back(u);
            for(auto v: prev_adj[u]){
                if(!vis[v]){
                    vis[v]=true;scc_dfs(v);
                }
            }
        }
 
        //this function fills all the strongly connected components in the all_scc 2D array
        void find_scc(){
            int j;
            find_topo_sort();
            vis=vector<bool>(n+1,false);
            vector<int>v = topo_sort;
            while(v.size()>0){
                j=v.back();v.pop_back();
                if(!vis[j]){
                    vis[j]=true;scc_dfs(j);
                    all_scc.push_back(cur_scc);
                    cur_scc.clear();
                }
            }
        }
};
